<?php

namespace backend\models;

use Yii;
use yii\helpers\ArrayHelper;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "admin".
 *
 * @property integer $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $last_login_time
 * @property integer $last_login_ip
 */
class Admin extends \yii\db\ActiveRecord implements IdentityInterface
{
    //用于接收验证码
    public $verifyCode;
    //接收明文密码
    public $password;
    //接收用户角色
    public $role;

    //场景定义
    const SCENARIO_ADD = 'add';//添加场景
    //const SCENARIO_LOGIN = 'login';//登录场景
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'admin';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username', 'email','status'], 'required'],
            [['role'],'required','on'=>'admin/add'],
            [['status', 'created_at', 'updated_at', 'last_login_time', 'last_login_ip'], 'integer'],
            [['username', 'password_hash', 'password_reset_token', 'email'], 'string', 'max' => 255],
            [['auth_key'], 'string', 'max' => 32],
            [['password'],'string'],
            [['password'],'required','on'=>self::SCENARIO_ADD],
            [['username'], 'unique'],
            [['email'], 'unique'],
            [['email'], 'email'],
            [['password_reset_token'], 'unique'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '用户账号',
            'auth_key' => 'cookie身份验证码',
            'password_hash' => '用户密码',
            'password_reset_token' => '重置密码口令',
            'email' => '用户邮箱',
            'status' => '账号状态',
            'created_at' => '创建时间',
            'updated_at' => '更新时间',
            'last_login_time' => '最后登录时间',
            'last_login_ip' => '最后登录ip',
            'password' => '用户密码',
            'role'=>'用户角色'
        ];
    }

    public static function findIdentity($id)
    {
        return static::findOne($id);
        // TODO: Implement findIdentity() method.
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
    }

    public function getId()
    {
        return $this->id;
        // TODO: Implement getId() method.
    }

    public function getAuthKey()
    {
        return $this->auth_key;
        // TODO: Implement getAuthKey() method.
    }

    public function validateAuthKey($authKey)
    {
        return $authKey === $this->getAuthKey();
        // TODO: Implement validateAuthKey() method.
    }

    /*
     * sava之前数据处理
     * */
    public function beforeSave($insert)
    {
        //判断是添加还是修改
        if ($insert) {//添加
            $this -> created_at = time();//设置添加时间
            $this->auth_key = Yii::$app->security->generateRandomString();//生成随机字符串 方便验证自动登录
        }else{//修改
            $this -> updated_at = time();//设置修改更新时间
        }
        if ($this->password) {
            $this -> password_hash = \Yii::$app->security->generatePasswordHash($this->password);
        }//密码加密
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /*
     * 获取所有权限角色
     * */
    public static function getRole(){
        return ArrayHelper::map(Yii::$app->authManager->getRoles(),'name','description');
    }

    /*
     * 给用户添加角色权限
     * */
    public function PermissionRole($id){
        $authManager = \Yii::$app->authManager;
        //获取角色对象
        foreach ($this->role as $roleName) {
            $role = $authManager -> getRole($roleName);
            $authManager->assign($role,$id);
        }
    }

    /*
     * 修改用户角色权限
     * */
    public function EditRole($id){
        $authManager = \Yii::$app->authManager;
        $authManager->revokeAll($id);//清除该用户的所有角色
        foreach ($this->role as $roleName) {
            $role = $authManager -> getRole($roleName);
            $authManager->assign($role,$id);
        }
    }

    /*
     * 根据权限获取菜单
     * */
    public static function getMenuItems()
    {
        $menuItems = [];//菜单数组
        $menus = Menu::findAll(['parent_id'=>0]);//获取所有一级菜单
        foreach ($menus as $menu) {
            $children = Menu::findAll(['parent_id'=>$menu->id]);
            $items = [];
            foreach ($children as $child) {
                if (Yii::$app->user->can($child->url)) {//根据登录用户的权限判断是否加入菜单
                    $items[] = ['label' =>$child->label, 'url' => [$child->url]];//加入二级菜单
                }
                //$items[] = ['label' =>$child->label, 'url' => [$child->url]];
            }
            if (empty($items)) {
                continue;
            }
            $menuItems[] = ['label'=>$menu->label,'items'=>$items];
        }
        return $menuItems;//菜单数组
    }

    /*
     * 登录时获取登录时间和ip
     * */
    public function getLastLogin()
    {
        $this->last_login_time=time();
        $this->last_login_ip= ip2long(\Yii::$app->request->getUserIP());
    }

}
